class Solution {
    public int minMeetingRooms(int[][] intervals) {
//         Arrays.sort(intervals, (a, b) -> {
//             if(a[0] < b[0]) return -1;
//             else if(a[0] == b[0]) return 0;
//             else return 1;
//         });
        
//         PriorityQueue<Integer> Q = new PriorityQueue<Integer>((a , b) -> {
//             if(a < b) return -1;
//             else if(a == b) return 0;
//             else return 1;
//         });
        
//         int rooms = 0;
        
//         for(int i = 0; i < intervals.length; i++){
//             if(Q.isEmpty()){
//                 rooms++;
//                 Q.add(intervals[i][1]);
//                 continue;
//             }
//             int currentStartTime = intervals[i][0];
//             int earliestEndTime = Q.peek();
//             if(currentStartTime >= earliestEndTime) {
//                 Q.remove();
//                 Q.add(intervals[i][1]);
//                 continue;
//             }
//             else{
//                 rooms++;
//                 Q.add(intervals[i][1]);
//             }
//         }
        
        // return rooms;
        
        int[] start = new int[intervals.length];
        int[] end = new int[intervals.length];
        
        for(int i = 0; i < intervals.length; i++){
            start[i] = intervals[i][0];
        }
        
        for(int i = 0; i < intervals.length; i++){
            end[i] = intervals[i][1];
        }
        
        Arrays.sort(start);
        Arrays.sort(end);
        
        int s = 0, e = 0, count = 0;
        while(s < start.length){
            if(start[s] < end[e]){
                count++;
                s++;
            } 
            else{
                s++;
                e++;
            }
        }
        return count;
    }
}
