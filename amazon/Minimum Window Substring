class Solution {
    public String minWindow(String s, String t) {
        
        // S = "ADOBECODEBANC", T = "ABC"
        
        if(t == null || t.length() == 0 || s == null) return "";
        
        Map<Character, Integer> mapT = new HashMap<Character, Integer>();
        for(int i = 0; i < t.length(); i++){
            int count = mapT.getOrDefault(t.charAt(i), 0) + 1;
            mapT.put(t.charAt(i), count);
        }
        int size = mapT.size();
        int l = 0, r = 0, formed = 0;
        int[] ans = {-1, 0, 0}; //min_length, start, end
        Map<Character, Integer> mapS = new HashMap<Character, Integer>();
        
        while(r < s.length()){
            char c = s.charAt(r);
            int count = mapS.getOrDefault(c, 0) + 1;
            mapS.put(c, count);
            
            // remember the below intValue() method in case of two Integer comparison.
            // otherwise objects will be compared.
            
            if(mapT.containsKey(c) && mapT.get(c).intValue() == mapS.get(c).intValue()) formed++;
            
            while(l <= r && formed == size){
                c = s.charAt(l);
                if(ans[0] == -1 || r - l + 1 <= ans[0]){
                    ans[0] = r - l + 1;
                    ans[1] = l;
                    ans[2] = r;                        
                }                    
                int lCount = mapS.get(c);
                mapS.put(c, lCount - 1);
                
                // only checking if the mapT contains the key or not is not sufficient here.
                // Becuase the formed++ get increased only when s and t's each character count equals.
                
                if(mapT.containsKey(c) && mapS.get(c).intValue() < mapT.get(c).intValue()) formed--;
                l++;
            }
            r++;
        }
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}
