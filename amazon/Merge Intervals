class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length == 0) return intervals;        
        quicksort(intervals, 0, intervals.length - 1);
        
        // Arrays.sort(intervals, (a, b) -> {
        //     if(a[0] < b[0]) return -1;
        //     else if(a[0] == b[0]) return 0;
        //     else return 1;
        // });
        
        List<List<Integer>> merged = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        temp.add(intervals[0][0]);
        temp.add(intervals[0][1]);
        merged.add(new ArrayList<Integer>(temp));

        for(int i = 1; i < intervals.length; i++){
            temp.clear();
            int index = merged.size();
            if(merged.get(index - 1).get(1) >= intervals[i][0]){
                temp.add(merged.get(index - 1).get(0));
                temp.add(Math.max(merged.get(index - 1).get(1), intervals[i][1]));
                merged.remove(index - 1);
                merged.add(new ArrayList<Integer>(temp));
            }
            else{
                temp.add(intervals[i][0]);
                temp.add(intervals[i][1]);
                merged.add(new ArrayList<Integer>(temp));
            }
        }
        
        int[][] results = new int[merged.size()][2];
        for(int i = 0; i < merged.size(); i++){
            results[i][0] = merged.get(i).get(0);
            results[i][1] = merged.get(i).get(1);
        }
        return results;
        
    }
    
    void quicksort(int[][] arr, int l, int h){
        if(l <= h){
            int index = partition(arr, l, h);
            quicksort(arr, l, index - 1);
            quicksort(arr, index + 1, h);
        }
    }
    
    int partition(int[][] arr, int l, int h){
        int pivot = arr[h][0];
        int start = l;
        for(int i = l; i < h; i++){
            if(arr[i][0] <= pivot){
                swap(arr, start, i);
                start++;
            }
        }
        swap(arr, start, h);
        return start;
    }
    
    void swap(int[][] arr, int i, int j){
        int[] temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
}
