class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length){
            return findMedianSortedArrays(nums2, nums1);
        }
        int l = 0, h = nums1.length;
        int half = (nums1.length + nums2.length + 1)/2;
        
        while(l <= h){
            int cut1 = (l + h)/2;
            int cut2 = half - cut1;
            
            int maxLeft1 = cut1 == 0 ? Integer.MIN_VALUE: nums1[cut1 - 1];
            int minRight1 = cut1 == nums1.length ? Integer.MAX_VALUE: nums1[cut1];
            
            int maxLeft2 = cut2 == 0 ? Integer.MIN_VALUE : nums2[cut2 - 1];
            int minRight2 = cut2 == nums2.length ? Integer.MAX_VALUE: nums2[cut2];
            
            if(maxLeft1 <= minRight2 && maxLeft2 <= minRight1){
                if((nums1.length + nums2.length) % 2 == 0)
                    return (Math.max(maxLeft1, maxLeft2) + Math.min(minRight1, minRight2)) / 2.0 ;
                else
                    return Math.max(maxLeft1, maxLeft2);
            }
            else if(maxLeft1 > minRight2)
                h = cut1 - 1;
            else
                l = cut1 + 1;
            
        }
        throw new IllegalArgumentException();        
    }
}
