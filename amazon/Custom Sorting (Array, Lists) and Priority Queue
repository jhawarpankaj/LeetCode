public static void main(String[] args) {
		
		// custom sort list using lambdas...
		List<String> list1 = new ArrayList<String>();
		list1.add("Pankaj");
		list1.add("Parthass");
		list1.add("Ameya");
		
		// think of the lambdas as all 2 elements of the list are compared one by one.
		// a denotes the first element and 
		// b denotes the second element...
		// Sorting order is defined by the return value:
		
		// -1 means the one among the 2 elems which will be placed at the beginning,
		// 0 means equal value and the order is preserved.
		// 1 means the one at the end.
		list1.sort((a, b) -> {
			if(a.length() > b.length()) return -1;
			else if(a.length() == b.length()) return 0;
			else return 1;
		});
		System.out.println(list1);		
		
		// custom sort array using lambdas...
		// [1, 2] -> x
		// [2, 10] -> y
		int[][] a = new int[2][2];
		a[0][0] = 1; a[0][1] = 2;
		a[1][0] = 10; a[1][1] = 2;
		
		Arrays.sort(a, (x, y) -> {
            if(x[1] < y[1]) return -1;
            else if(x[0] == y[0]) return 0;
            else return 1;
        });
		
		for(int i = 0; i < a.length; i++) {
			System.out.println(a[i][0] + " ");
		}

		// Similarly for Priority Queue.
		// It can be used as a min heap or a max heap;
		PriorityQueue<Integer> Q = new PriorityQueue<Integer>((m, n) ->  {
			if(m < n) return -1;
			else if(m == n) return 0;
			else return 1;
		});
		
	}
